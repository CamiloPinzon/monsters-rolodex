{"version":3,"sources":["components/search-box/search-box.component.tsx","components/card/card.component.tsx","components/card-list/card-list.component.tsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","props","placeholder","handleChange","className","type","onChange","Card","src","monsterInfo","id","alt","name","email","CardList","monsters","map","monster","App","handleChangeMethod","e","setState","searchField","target","value","state","fetch","then","response","json","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAuBeA,EAfqB,SAACC,GACjC,IACIC,EAEAD,EAFAC,YACAC,EACAF,EADAE,aAEJ,OACI,uBACAC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCDHI,G,MAViB,SAACN,GAC7B,OACI,sBAAKG,UAAU,iBAAf,UACI,qBAAKI,IAAG,+BAA0BP,EAAMQ,YAAYC,GAA5C,0BAAwEC,IAAKV,EAAMQ,YAAYG,OACvG,mCAAMX,EAAMQ,YAAYG,KAAxB,OACA,kCAAKX,EAAMQ,YAAYI,MAAvB,YCSGC,G,MAV2B,SAACb,GACvC,OACI,qBAAKG,UAAU,YAAf,SACKH,EAAMc,SAASC,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAAuBR,YAAaQ,GAAzBA,EAAQP,WC4BhBQ,E,kDArCjB,aAAc,IAAD,8BACX,gBAcFC,mBAAqB,SAAAC,GACnB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXV,SAAU,GACVO,YAAa,IALJ,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAZ,GAAQ,OAAI,EAAKM,SAAS,CAACN,SAAUA,S,oBAO7C,WACE,MAAgCe,KAAKL,MAA9BV,EAAP,EAAOA,SAAUO,EAAjB,EAAiBA,YACXS,EAAmBhB,EAASiB,QAAQ,SAAAf,GAAO,OAC/CA,EAAQL,KAAKqB,cACZC,SAASZ,EAAYa,wBAEtB,OACE,sBAAK/B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CACAF,YAAY,iBACZC,aAAgB2B,KAAKX,qBACrB,cAAC,EAAD,CAAUJ,SAAWgB,W,GAhCXK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.711c6b66.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'components/search-box/search-box.styles.css';\r\n\r\ninterface Search {\r\n    placeholder: string;\r\n    handleChange: any;\r\n}\r\n\r\nconst SearchBox: React.FC<Search> = (props: Search) => {\r\n    const {\r\n        placeholder,\r\n        handleChange\r\n    } = props\r\n    return(\r\n        <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport 'components/card/card.styles.css';\r\n\r\ninterface Monster {\r\n    monsterInfo: Object\r\n}\r\n\r\nconst Card: React.FC<Monster> = (props: any) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img src={`https://robohash.org/${props.monsterInfo.id}?set=set2&size=180x180`} alt={props.monsterInfo.name} />\r\n            <h2> {props.monsterInfo.name} </h2>\r\n            <p> {props.monsterInfo.email} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from 'components/card/card.component';\r\nimport 'components/card-list/card-list.styles.css';\r\n\r\ninterface MonstersProps {\r\n    monsters?: Array<{\r\n        id: React.Key,\r\n        name: string\r\n    }>;\r\n}\r\n\r\nconst CardList: React.FC<MonstersProps> = (props:any) => {\r\n    return (\r\n        <div className='card-list'>\r\n            {props.monsters.map((monster: { id: React.Key; name: string; }) => (\r\n                <Card key={monster.id} monsterInfo={monster}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import 'App.css';\nimport { Component } from 'react';\nimport SearchBox from 'components/search-box/search-box.component';\nimport CardList from 'components/card-list/card-list.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    \n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(monsters => this.setState({monsters: monsters}))\n  }\n\n  handleChangeMethod = e => {\n    this.setState({ searchField: e.target.value })\n  }\n  \n  render () {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter( monster =>\n      monster.name.toLowerCase()\n      .includes(searchField.toLocaleLowerCase())\n      );\n      return (\n        <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n        placeholder='Search Monster'\n        handleChange = {this.handleChangeMethod}/>\n        <CardList monsters= {filteredMonsters} />\n        </div>\n        );\n      }\n    }\n    \n    export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}